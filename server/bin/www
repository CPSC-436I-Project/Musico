#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const Chat = require('../mongoDB/models/chatModel');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var socketmap = {};

/**
 * Setup Socket
 */
const io = require("socket.io")(server);
io.on("connection", socket => {

  // join a room, a room is available for every genre.
  // The chat component connects the socket to the genre's room
  socket.on("join", ({genre}, callback) => {
    console.log("called join");
    // join the room
    socket.join(genre);
    // store the socketid mapped to the userid
    socketmap[socket.id] = genre;
    // call the callback
    if (typeof(callback) === "function") {
      callback();
    }
  });

  socket.on("message", async (data, callback) => {
    console.log("message called")
    const newMessage = {user: data.userId, message: data.message};
    // use the socketmap to get the genre for that socket, 
    // and post message to that genre
    io.to(socketmap[socket.id]).emit("newMessage", newMessage);
    // store the message in Mongodb
    var messages = await Chat.findOne({channel: socketmap[socket.id]})
      .then(chats => chats["messages"])
      .catch(err => {console.log(err)});

    messages.push(newMessage);

    Chat.findOneAndUpdate({channel: socketmap[socket.id]}, {messages: messages})
      .catch(err => console.log('Error: ' + err));
    
    // callback
    callback();
  });

  socket.on("disconnect", (data, callback) => {
    console.log("disconnect called", socket.id);
    // remove socket from socketmap
    delete socketmap[socket.id];
    // call the callback
    //callback();
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
