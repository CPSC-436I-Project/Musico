#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const { socketmap } = require('../socket/utility');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Setup Socket
 */
const io = require("socket.io")(server);

io.on("connection", socket => {

  // join a room, a room is available for every genre.
  // The chat component connects the socket to the genre's room
  socket.on("join", ({genre}, callback) => {
    // join the room
    socket.join(genre);
    // store the socketid mapped to the userid
    socketmap[socket.id] = genre;
    // TODO: send current playing song info

    // call the callback
    if (typeof(callback) === "function") {
      callback();
    }
  });

  require('../socket/chat')(socket, io);
  require('../socket/queue')(socket, io);

  socket.on("disconnect", (data, callback) => {
    // remove socket from socketmap
    delete socketmap[socket.id];
    // call the callback
    //callback();
  });

  return io;

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var duration = 1

function queueSocketManager(genre) {

  setTimeout(async () => {
    // get a song from the queue of that genre, remove it from the queue
    let songId = await Queue.findOne({channel: req.params.genre})
    .then(queue => queue["queue"])
    .then(queue => query[0])
    .catch(err => {console.log(err)})
    let song = await Song.findById(songId)
    // send a socket event to update the frontend queue

    // send a socket message to play the song

    // set the duration to the duration of the current song
    duration = song.duration
    // call the function again
    queueSocketManager(genre)

  }, duration*1000)

}
